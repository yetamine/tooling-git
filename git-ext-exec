#!/bin/bash
#|
#| Executes a command in all given directories that are either read from a file
#| or from STDIN.
#|
#| Usage:
#|
#| git-ext-exec [OPTION... --] COMMAND
#|
#| Options:
#|   -b, --break        break execution on an error immediately
#|   -f, --file FILE    read the directory list from the FILE instead of STDIN
#|   -g, --generate     dump the command script to STDIN instead of running it
#|   -h, --help         show this help and exit
#|   -v, --verbose      print the directory to execute COMMAND in to STDERR
#|
#| If any options are provided, use -- to separate the option list from the
#| COMMAND to execute. When the COMMAND is more complex, rather employ -s option
#| and pass the command as a single argument, which is then executed as a script.
#| However, -s option can obscure the exit code of the command sometimes, so that
#| -b option might not be effective.
#|
#| This command is useful for combining with git-ext-list that can supply the list
#| of Git repositories and the command is then executed in their context, e.g.:
#|
#| git-ext-each | git-ext-exec git pull

BREAK=0
DIRS=-
EXEC=
VERBOSE=0

SCRIPT=
GENERATE=0

SCRIPT_FILE="${BASH_SOURCE[0]}"
while [[ -n "$1" ]]; do
    case "$1" in
    -b|--break)
        BREAK=1
        shift
        ;;

    -f|--file)
        DIRS="$2"
        shift 2
        ;;

    -g|--generate)
        SCRIPT="/dev/stdout"
        GENERATE=1
        shift
        ;;

    -h|--help)
        sed '/#|.*/ s/^#|[[:space:]]\?//p;d' < "$SCRIPT_FILE"
        exit 1
        ;;

    -v|--verbose)
        VERBOSE=1
        shift
        ;;

    --)
        shift
        break
        ;;

    -*)
        echo "Unknown option encountered: '$1'" >&2
        exit 1
        ;;

    *)
        break
        ;;
    esac
done

if [[ $GENERATE -eq 0 ]]; then
    # Because tempfile is not available on MSYS2, let's use a rough approximation
    SCRIPT="${TMPDIR:-/tmp}"/`date +'git-ext-exec-%s-%N.sh'`
fi

echo '#!'"$SHELL"               >  "$SCRIPT"
echo 'shopt -s expand_aliases'  >> "$SCRIPT"

cat "$DIRS" | while read DIR; do
    if [[ $VERBOSE -ne 0 ]]; then
        echo 'echo '"$DIR"' >&2' >> "$SCRIPT"
    fi

    echo '# '"$DIR"'
(
    cd '"$DIR"'
    '"$@"'
)' >> "$SCRIPT"

    if [[ $BREAK -ne 0 ]]; then
        echo 'RESULT=$?
if [[ $RESULT -ne 0 ]]; then
    exit $RESULT
fi
' >> "$SCRIPT"
    fi
done

if [[ $GENERATE -eq 0 ]]; then
    "$SHELL" -l -- "$SCRIPT"
    # Should be trapped
    rm "$SCRIPT"
fi
